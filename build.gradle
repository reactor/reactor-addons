import org.gradle.util.VersionNumber
import java.text.SimpleDateFormat

/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext.kotlinVersion = '1.3.41'
  repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
	classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.1.0'
  }
}

plugins {
	id "com.jfrog.artifactory" version "4.15.2" apply false
}

description = 'Reactor Core Addons including processors, adapters and more'

ext {
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  //NOTE: reactor-core version is declared in gradle.properties

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'

  // Libraries
  openHftChronicleVersion = '3.4.2'
  rxJava2Version = '2.2.8'
  rxJava3Version = '3.0.0'
  akkaActorVersion = '2.4.10'

  swtVersion = '4.5.2'
  swtVersionPlatform = '4.5.2'

  // Testing
  assertJVersion = '3.9.0'
  quickTheoriesVersion = '0.24'
  mockitoVersion = '1.10.19'
  spockVersion = '1.0-groovy-2.4'

  javadocLinks = ["https://projectreactor.io/docs/core/${reactorCoreVersion}/api/",
		  		  "https://docs.oracle.com/javase/7/docs/api/",
				  "https://docs.oracle.com/javaee/6/api/",
				  "https://fasterxml.github.io/jackson-databind/javadoc/2.5/",
				  "https://www.goldmansachs.com/gs-collections/javadoc/5.1.0/",
				  "https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/"] as
		  String[]

	versionNumber = VersionNumber.parse(version.toString())
	if (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) {
		osgiVersion = "${version}.RELEASE"
		println "$version is a release, will use $osgiVersion for bnd"
	}
	else if (versionNumber.qualifier.equalsIgnoreCase("SNAPSHOT")) {
		def sdf = new SimpleDateFormat("yyyyMMddHHmm");
		sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
		def buildTimestamp = sdf.format(new Date())
		osgiVersion = "${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.BUILD-$buildTimestamp"
		println "$version is a snapshot, will use $osgiVersion for bnd"
	}
	else {
		osgiVersion = "${versionNumber.major}.${versionNumber.minor}.${versionNumber.micro}.${versionNumber.qualifier}"
		println "$version is neither release nor snapshot, will use $osgiVersion for bnd"
	}
}

apply from: "$gradleScriptDir/doc.gradle"
apply from: "$gradleScriptDir/releaser.gradle"

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


configure(subprojects) { project ->
  group = 'io.projectreactor.addons'

  apply plugin: 'propdeps' //TODO replace with a simpler local plugin?
  apply plugin: 'java'
  apply plugin: 'kotlin'
  apply from: "${rootDir}/gradle/setup.gradle"

  [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
														   "-Xlint:cast",
														   "-Xlint:classfile",
														   "-Xlint:dep-ann",
														   "-Xlint:divzero",
														   "-Xlint:empty",
														   "-Xlint:finally",
														   "-Xlint:overrides",
														   "-Xlint:path",
														   "-Xlint:processing",
														   "-Xlint:static",
														   "-Xlint:try",
														   "-Xlint:deprecation",
														   "-Xlint:unchecked",
														   "-Xlint:-serial",      // intentionally disabled
														   "-Xlint:-options",     // intentionally disabled
														   "-Xlint:-fallthrough", // intentionally disabled
														   "-Xlint:-rawtypes"     // TODO enable and fix warnings
  ]

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
  }

  compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
  }

  // now that kotlin-gradle-plugin 1.1.60 is out with fix for https://youtrack.jetbrains.com/issue/KT-17564
  // be wary and fail if the issue of source file duplication in jar comes up again
  sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.FAIL
  }

  if (JavaVersion.current().isJava8Compatible()) {
	compileTestJava.options.compilerArgs += "-parameters"
	tasks.withType(Javadoc) {
	  options.addStringOption('Xdoclint:none', '-quiet')
	}
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  project.tasks.withType(Test).all {
	systemProperty("java.awt.headless", "true")
	systemProperty("reactor.trace.cancel", "true")
	systemProperty("reactor.trace.nocapacity", "true")
	systemProperty("testGroups", project.properties.get("testGroups"))
	scanForTestClasses = false
	include '**/*Tests.*'
	include '**/*Test.*'
	include '**/*Spec.*'
	exclude '**/*Abstract*.*'
	exclude '**/dummy/Test.*'
  }

	repositories {
		jcenter()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		if (version.endsWith('-SNAPSHOT')) {
			mavenLocal()
			maven { url 'https://repo.spring.io/snapshot' }
		}
		maven { url 'https://repo.spring.io/milestone' }
	}

  // dependencies that are common across all java projects
  dependencies {
	compile "io.projectreactor:reactor-core:$reactorCoreVersion"

	// JSR-305 annotations
	optional "com.google.code.findbugs:jsr305:3.0.2"

	// Logging
	optional "org.slf4j:slf4j-api:$slf4jVersion"

	// Testing
	testCompile 'junit:junit:4.12',
			"org.hamcrest:hamcrest-library:1.3",
			"org.assertj:assertj-core:$assertJVersion",
			"org.quicktheories:quicktheories:$quickTheoriesVersion",
			"org.testng:testng:6.8.5"
	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
	testCompile "io.projectreactor:reactor-test:$reactorCoreVersion"

  }
}

project('reactor-adapter') {
  description = 'Adapters on top of various async boundary providers'

  apply plugin: "biz.aQute.bnd.builder"

	ext {
		bndOptions = [
			"-exportcontents": "reactor.*;version=$osgiVersion;-noimport:=true",
			"Import-Package": [
				"!*internal*",
				"!javax.annotation",
				"kotlin.*;resolution:=optional",
				"*"
			].join(","),
			"Bundle-Name" : "reactor-adapter",
			"Bundle-SymbolicName" : "io.projectreactor.addons.reactor-adapter",
			"Bundle-Version" : "$osgiVersion"
		]
	}

  dependencies {
	//Optional RxJava 2 Converter
	optional "io.reactivex.rxjava2:rxjava:$rxJava2Version"
	//Optional RxJava 3 Converter
	optional "io.reactivex.rxjava3:rxjava:$rxJava3Version"

	optional "com.typesafe.akka:akka-actor_2.11:$akkaActorVersion"

	optional "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

	testCompile "org.reactivestreams:reactive-streams-tck:1.0.3"
  }

  jar {
    manifest {
      attributes('Automatic-Module-Name': 'reactor.adapter')
    }
		bnd(bndOptions)
  }

}

project('reactor-extra') {
  description = 'Reactor Extra utilities'

	apply plugin: "biz.aQute.bnd.builder"

	repositories {
		maven { url "https://maven-eclipse.github.io/maven" }
	}

	ext {
		bndOptions = [
			"-exportcontents" : "reactor.*;version=$osgiVersion;-noimport:=true",
			"Import-Package": [
				"!*internal*",
				"!javax.annotation",
				"kotlin.*;resolution:=optional",
				"org.eclipse.*;resolution:=optional",
				"javax.swing.*;resolution:=optional",
				"*"
			].join(","),
			"Bundle-Name" : "reactor-extra",
			"Bundle-SymbolicName" : "io.projectreactor.addons.reactor-extra",
			"Bundle-Version" : "$osgiVersion"
		]
	}

  dependencies {
	optional "org.eclipse.swt:org.eclipse.swt.${getSwtPlatform()}:${swtVersionPlatform}"
	optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	testCompile "org.reactivestreams:reactive-streams-tck:1.0.3"
	testCompile "org.mockito:mockito-core:2.23.0"
  }

  jar {
    manifest {
      attributes('Automatic-Module-Name': 'reactor.extra')
    }
		bnd(bndOptions)
  }
}

static def getSwtPlatform() {
  String osname = System.properties['os.name']
  String osarch = System.properties['os.arch']
  if (osname.toLowerCase(Locale.ROOT).contains('win')) {
	if (osarch.contains("64")) {
	  return "win32.win32.x86_64"
	}
	return "win32.win32.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("nux")) {
	if (osarch.contains("64")) {
	  return "gtk.linux.x86_64"
	}
	return "gtk.linux.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("mac")) {
	return "cocoa.macosx.x86_64"
  }
  throw new RuntimeException("Unknown OS/Arch: " + osname + ", " + osarch)
}
