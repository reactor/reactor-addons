/*
 * Copyright (c) 2011-2017 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
	maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
			'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE',
			'com.github.jengelman.gradle.plugins:shadow:1.2.3',
			'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8'
  }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.2'
}

description = 'Reactive fast data framework for the JVM'

ext {
  gradleVersion = '3.1'
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  // Languages
  groovyVersion = '2.4.1'

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'

  // Libraries
  openHftChronicleVersion = '3.4.2'
  rxJava2Version = '2.1.0'
  akkaActorVersion = '2.4.10'

  swtVersion = '4.5.2'
  swtVersionPlatform = '4.5.2'

  // Testing
  mockitoVersion = '1.10.19'
  spockVersion = '1.0-groovy-2.4'

  javadocLinks = ["http://docs.oracle.com/javase/7/docs/api/",
				  "http://docs.oracle.com/javaee/6/api/",
				  "http://fasterxml.github.io/jackson-databind/javadoc/2.5/",
				  "http://www.goldmansachs.com/gs-collections/javadoc/5.1.0/",
				  "http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/"] as String[]
}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


configure(subprojects) { project ->
  group = 'io.projectreactor.addons'

  apply plugin: 'propdeps'
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply from: "${gradleScriptDir}/ide.gradle"

  [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
														   "-Xlint:cast",
														   "-Xlint:classfile",
														   "-Xlint:dep-ann",
														   "-Xlint:divzero",
														   "-Xlint:empty",
														   "-Xlint:finally",
														   "-Xlint:overrides",
														   "-Xlint:path",
														   "-Xlint:processing",
														   "-Xlint:static",
														   "-Xlint:try",
														   "-Xlint:deprecation",
														   "-Xlint:unchecked",
														   "-Xlint:-serial",      // intentionally disabled
														   "-Xlint:-options",     // intentionally disabled
														   "-Xlint:-fallthrough", // intentionally disabled
														   "-Xlint:-rawtypes"     // TODO enable and fix warnings
  ]

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  if (JavaVersion.current().isJava8Compatible()) {
	compileTestJava.options.compilerArgs += "-parameters"
	tasks.withType(Javadoc) {
	  options.addStringOption('Xdoclint:none', '-quiet')
	}
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
  }

  project.tasks.withType(Test).all {
	systemProperty("java.awt.headless", "true")
	systemProperty("reactor.trace.cancel", "true")
	systemProperty("reactor.trace.nocapacity", "true")
	systemProperty("testGroups", project.properties.get("testGroups"))
	scanForTestClasses = false
	include '**/*Tests.*'
	include '**/*Spec.*'
	exclude '**/*Abstract*.*'
  }

  repositories {
	if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
	  mavenLocal()
	  maven { url 'http://repo.spring.io/libs-snapshot' }
	}

	maven { url 'http://repo.spring.io/libs-milestone' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	jcenter()
	mavenCentral()
  }

  // dependencies that are common across all java projects
  dependencies {
	compile "io.projectreactor:reactor-core:$version"

	// JSR-305 annotations
	optional "com.google.code.findbugs:jsr305:3.0.0"

	// Logging
	optional "org.slf4j:slf4j-api:$slf4jVersion"


	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

	// Testing
	testCompile 'junit:junit:4.12',
			"org.hamcrest:hamcrest-library:1.3",
			"org.testng:testng:6.8.5"
  }

  if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	repositories {
	  maven { url 'http://repo.spring.io/libs-snapshot' }
	}

	dependencyManagement {
	  springIoTestRuntime {
		imports {
		  mavenBom "io.spring.platform:platform-bom:$platformVersion"
		}
	  }
	}
  }
}


project('reactor-logback') {
  description = 'Async Logback appender implementation'

  apply plugin: 'application'
  apply plugin: 'com.github.johnrengelman.shadow'

  mainClassName = "reactor.logback.DurableLogUtility"

  dependencies {
	compile "ch.qos.logback:logback-classic:$logbackVersion",
			"net.openhft:chronicle:$openHftChronicleVersion",
			"commons-cli:commons-cli:1.2"
  }

  shadowJar {
	dependencies {
	  include(dependency("net.openhft:chronicle:$openHftChronicleVersion"))
	  include(dependency("commons-cli:commons-cli:1.2"))
	  //include(project(":reactor-core"))
	}
  }
}

project('reactor-adapter') {
  description = 'Scheduler implementations on top of various async boundary providers'

  dependencies {
	//Optional RxJava 2 Converter
	optional "io.reactivex.rxjava2:rxjava:$rxJava2Version"

	optional "com.typesafe.akka:akka-actor_2.11:$akkaActorVersion"

	testCompile(project(":reactor-test"))
	testCompile "org.reactivestreams:reactive-streams-tck:1.0.0"
  }
}

project('reactor-test') {
  description = 'Reactor Test support'
  
  dependencies {
	testCompile 'org.assertj:assertj-core:3.6.1'
  }
}

project('reactor-extra') {
  description = 'Reactor Extra utilities'

  repositories {
	maven { url "http://maven-eclipse.github.io/maven" }
  }

  dependencies {
	testCompile(project(":reactor-test"))
	optional "org.eclipse.swt:org.eclipse.swt.${getPlatform()}:${swtVersionPlatform}"

  }
}

task release {
  subprojects.each{
	if(it.version.endsWith('SNAPSHOT')) return
	dependsOn it.assemble
  }
}



def getPlatform() {
  String osname = System.properties['os.name']
  String osarch = System.properties['os.arch']
  if (osname.toLowerCase(Locale.ROOT).contains('win')) {
	if (osarch.contains("64")) {
	  return "win32.win32.x86_64"
	}
	return "win32.win32.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("nux")) {
	if (osarch.contains("64")) {
	  return "gtk.linux.x86_64"
	}
	return "gtk.linux.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("mac")) {
	return "cocoa.macosx.x86_64"
  }
  throw new RuntimeException("Unknown OS/Arch: " + osname + ", " + osarch)
}
